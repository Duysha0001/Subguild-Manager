import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio
import os, datetime


#----------------------------+
#         Constants          |
#----------------------------+
from db_models import guild_limit, default_avatar_url, member_limit
from functions import EmergencyExit


#----------------------------+
#         Functions          |
#----------------------------+
from functions import find_alias, ask_to_choose, anf
from custom_converters import IntConverter, IsNotSubguild
from db_models import Server, Guild

# Other
def add_sign(Int):
    if str(Int)[0] == "-":
        return str(Int)
    else:
        return f"+{Int}"


def sep_args(text):
    text += " "
    if text[0] != "[":
        i = text.find(" ")
        return (text[:+i], text[+i:].strip())
    else:
        bal = 0
        sep = len(text) - 1
        for i in range(len(text)):
            s = text[i]
            if s == "[":
                bal += 1
            elif s == "]":
                bal -= 1
            if bal == 0:
                sep = i
                break
        return (text[1:sep], text[+sep+1:].strip())


def role_gte(role, member):
    return member.id != member.guild.owner_id and role.position >= member.top_role.position


def image_link(string):
    return string.startswith("https://")


def mmorpg_col(col_name):
    colors = {
        "paper": discord.Color.from_rgb(163, 139, 101),
        "canopy": discord.Color.from_rgb(120, 55, 55),
        "sky": discord.Color.from_rgb(131, 171, 198),
        "clover": discord.Color.from_rgb(59, 160, 113),
        "vinous": discord.Color.from_rgb(135, 20, 20),
        "lilac": discord.Color.from_rgb(120, 100, 153),
        "pancake": discord.Color.from_rgb(211, 150, 65)
    }
    return colors[col_name]


async def give_join_role(member, role_id):
    if role_id is not None and member is not None:
        role = discord.utils.get(member.guild.roles, id=role_id)
        if role != None and role not in member.roles:
            try:
                await member.add_roles(role)
            except Exception:
                pass
    return


async def remove_join_role(member, role_id):
    if role_id is not None and member is not None:
        role = member.guild.get_role(role_id)
        if role is not None and role in member.roles:
            try:
                await member.remove_roles(role)
            except Exception:
                pass
    return


async def post_log(guild, channel_id, log):
    if channel_id is not None:
        channel = guild.get_channel(channel_id)
        if channel is not None:
            await channel.send(embed=log)



class guild_control(commands.Cog):
    def __init__(self, client):
        self.client = client

    #----------------------------+
    #           Events           |
    #----------------------------+
    @commands.Cog.listener()
    async def on_ready(self):
        print(">> Guild controller cog is loaded")
    
    
    #----------------------------+
    #          Commands          |
    #----------------------------+
    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["rep"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏\n",
        usage="change –ß–∏—Å–ª–æ [–ì–∏–ª—å–¥–∏—è] –ü—Ä–∏—á–∏–Ω–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\nset –ß–∏—Å–ª–æ [–ì–∏–ª—å–¥–∏—è] –ü—Ä–∏—á–∏–Ω–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
        brief="change -10 –ö–æ—Ä–æ–ª–∏ –£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –Ω–∞–∫–∞–∑–∞–Ω\nset 100 [–ö–æ—Ä–æ–ª–∏ –≤–æ—Ä–æ–≤] –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞" )
    async def reputation(self, ctx, param, value: IntConverter=None, *, text_data=None):
        pr = ctx.prefix
        param = param.lower()
        params = {
            "change": {
                "usage": f"`{pr}rep change –ö–æ–ª-–≤–æ –ì–∏–ª—å–¥–∏—è`",
                "example": f"`{pr}rep change 10 –ì–∏–ª—å–¥–∏—è`",
                "info": "–ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤",
                "log": "–ò–∑–º–µ–Ω–µ–Ω–æ"
            },
            "set": {
                "usage": f"`{pr}rep set –ö–æ–ª-–≤–æ –ì–∏–ª—å–¥–∏—è`",
                "example": f"`{pr}rep set 70 –ì–∏–ª—å–¥–∏—è`",
                "info": "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É –≥–∏–ª—å–¥–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é",
                "log": "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            }
        }

        if not param in params:
            reply = discord.Embed(color=mmorpg_col("vinous"))
            reply.title = "üìë –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"
            reply.description = (
                    f"–í—ã –≤–≤–µ–ª–∏: `{param}`\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                    f"> `{pr}rep change`\n"
                    f"> `{pr}rep set`\n"
                    f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: `{pr}rep`"
                )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)

        elif value is None or text_data is None:
            param_desc = params[param]
            reply = discord.Embed()
            reply.title = f"‚ùì | {pr}rep {param}"
            reply.description = (
                    f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {param_desc['usage']}\n"
                    f"**–ü—Ä–∏–º–µ—Ä:** {param_desc['example']}\n"
                    f"-> {param_desc['info']}"
                )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)

        else:
            search, text = sep_args(text_data)
            if text == "":
                text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            sconf = Server(ctx.guild.id, {"subguilds.name": True, "log_channel": True, "master_roles": True})
            
            guild_name = await ask_to_choose(sconf.names_matching(search), ctx.channel, ctx.author, self.client, ctx.prefix)
            
            if guild_name is None:
                raise IsNotSubguild(search)

            elif isinstance(guild_name, EmergencyExit):
                guild_name = None
                
            # ----------
            if guild_name is not None:
                if not any([r.id in sconf.master_roles for r in ctx.author.roles]) and not ctx.author.guild_permissions.administrator:
                    raise commands.MissingPermissions(["administrator", "guild_master"])

                else:
                    if param == "change":
                        changes = add_sign(value)
                        sconf.add_reputation(guild_name, value)
                    elif param == "set":
                        changes = f"—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}"
                        sconf.set_reputation(guild_name, value)

                    reply = discord.Embed(color = mmorpg_col("clover"))
                    reply.title = f"‚úÖ | {anf(guild_name)}"
                    reply.description = f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {changes}"
                    await ctx.send(embed=reply)

                    log = discord.Embed(
                        title="üîÖ | –ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è",
                        description=(
                            f"**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {anf(ctx.author)}\n"
                            f"**–ì–∏–ª—å–¥–∏—è:** {anf(guild_name)}\n"
                            f"**–î–µ–π—Å—Ç–≤–∏–µ:** {changes}\n"
                            f"**–ü—Ä–∏—á–∏–Ω–∞:** {text}"
                        ),
                        color=mmorpg_col("pancake")
                    )
                    await post_log(ctx.guild, sconf.log_channel, log)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["create-guild", "createguild", "cg", "create"],
        description=("—Å–æ–∑–¥–∞—ë—Ç –≥–∏–ª—å–¥–∏—é. –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º –º–∞—Å—Ç–µ—Ä-—Ä–æ–ª–µ–π –∏–ª–∏ —Ä–æ–ª–µ–π —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥–∏–ª—å–¥–∏–π. "
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –≥–∏–ª—å–¥–∏–π (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ `help settings`)"),
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏",
        brief="–ö–æ—Ä–æ–ª–∏" )
    async def create_guild(self, ctx, *, guild_name):
        guild_name = guild_name[:32].replace("$", "")
        pr = ctx.prefix
        created = False
        sconf = Server(ctx.guild.id, {
            "subguilds.name": True, "subguilds.leader_id": True,
            "log_channel": True, "master_roles": True, "creator_roles": True,
            "guild_limit": True, "creator_limit": True
        })
        if sconf.guild_count >= sconf.guild_limit:
            reply = discord.Embed(color=discord.Color.dark_red())
            reply.title = "‚ùå | –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–∏–ª—å–¥–∏–π"
            reply.description = f"–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∏–ª—å–¥–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ –º–µ–Ω—å—à–µ **{sconf.guild_limit}**."
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
            return
        elif guild_name in [g.name for g in sconf.guilds]:
            reply = discord.Embed(color=discord.Color.dark_red())
            reply.title = "‚ùå | –û–¥–Ω–æ–∏–º—ë–Ω–Ω–∞—è –≥–∏–ª—å–¥–∏—è"
            reply.description = f"–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ —É–∂–µ –µ—Å—Ç—å –≥–∏–ª—å–¥–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{guild_name}**."
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
            return
        
        if ctx.author.guild_permissions.administrator or any([r.id in sconf.master_roles for r in ctx.author.roles]):
            created = True
        elif any([r.id in sconf.creator_roles for r in ctx.author.roles]):
            total_owned = 0
            for g in sconf.guilds:
                if g.leader_id == ctx.author.id:
                    total_owned += 1
            if total_owned >= sconf.creator_limit:
                reply = discord.Embed(color=discord.Color.dark_red())
                reply.title = "‚ùå | –í–∞–º –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∏–ª—å–¥–∏–∏"
                reply.description = f"**{sconf.creator_limit}** - —ç—Ç–æ –º–∞–∫—Å–∏–º—É–º –≥–∏–ª—å–¥–∏–π, –∫–æ—Ç–æ—Ä—ã–º –í—ã –º–æ–∂–µ—Ç–µ –≤–ª–∞–¥–µ—Ç—å."
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
                return
            else:
                created = True
        else:
            raise commands.MissingPermissions(["administrator", "guild_master", "guild_creator"])

        if created:
            sconf.create_guild(guild_name, ctx.author.id)

            reply = discord.Embed(color=mmorpg_col("clover"))
            reply.title = f"‚úÖ | –ì–∏–ª—å–¥–∏—è **{guild_name}** —Å–æ–∑–¥–∞–Ω–∞"
            reply.description = (
                    f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–∏–ª—å–¥–∏—é: `{pr}edit-guild`\n"
                    f"–ü—Ä–æ—Ñ–∏–ª—å –≥–∏–ª—å–¥–∏–∏: `{pr}guild-info {guild_name}`\n"
                    f"–ó–∞–π—Ç–∏ –≤ –≥–∏–ª—å–¥–∏—é `{pr}join-guild {guild_name}`"
                )
            reply.set_thumbnail(url=default_avatar_url)
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

            log = discord.Embed(color=mmorpg_col("clover"))
            log.title = "‚ôª | –°–æ–∑–¥–∞–Ω–∞ –≥–∏–ª—å–¥–∏—è"
            log.description = (
                f"**–°–æ–∑–¥–∞—Ç–µ–ª—å:** {anf(ctx.author)}\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {anf(guild_name)}\n"
            )
            await post_log(ctx.guild, sconf.log_channel, log)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["edit-guild", "editguild", "eg", "edit", "—Ä–µ–¥"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∏–ª—å–¥–∏–∏. –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ.",
        usage=("–ü–∞—Ä–∞–º–µ—Ç—Ä [–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏] –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
            "name\n"
            "description\n"
            "avatar\n"
            "leader\n"
            "helper\n"
            "role\n"
            "privacy\n"
            "limit\n"
        ),
        brief="role [–ö–æ—Ä–æ–ª–∏ –í–æ—Ä–æ–≤] @–†–æ–ª—å –ö–æ—Ä–æ–ª–µ–π" )
    async def edit_guild(self, ctx, param, *, text_data = None):
        pr = ctx.prefix
        param_desc = {
            "name": {
                "usage": f'`{pr}edit-guild name [–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ] –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`',
                "example": f'`{pr}edit-guild name [–ú–æ—è –≥–∏–ª—å–¥–∏—è] –õ—É—á—à–∞—è –≥–∏–ª—å–¥–∏—è`'
            },
            "description": {
                "usage": f'`{pr}edit-guild description [–ì–∏–ª—å–¥–∏—è] –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`',
                "example": f'`{pr}edit-guild description [–ú–æ—è –≥–∏–ª—å–¥–∏—è] –î–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –æ–±—â–∞—Ç—å—Å—è`'
            },
            "avatar_url": {
                "usage": f'`{pr}edit-guild avatar [–ì–∏–ª—å–¥–∏—è] –°—Å—ã–ª–∫–∞`',
                "example": f'`{pr}edit-guild avatar [–ú–æ—è –≥–∏–ª—å–¥–∏—è] https://discordapp.com/.../image.png`'
            },
            "leader_id": {
                "usage": f'`{pr}edit-guild leader [–ì–∏–ª—å–¥–∏—è] @–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`',
                "example": f'`{pr}edit-guild leader [–ú–æ—è –≥–∏–ª—å–¥–∏—è] @–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`'
            },
            "helper_id": {
                "usage": f'`{pr}edit-guild helper [–ì–∏–ª—å–¥–∏—è] @–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`',
                "example": f'`{pr}edit-guild helper [–ú–æ—è –≥–∏–ª—å–¥–∏—è] @–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`'
            },
            "role_id": {
                "usage": f'`{pr}edit-guild role [–ì–∏–ª—å–¥–∏—è] @–†–æ–ª—å (–∏–ª–∏ delete)`',
                "example": f'`{pr}edit-guild role [–ú–æ—è –≥–∏–ª—å–¥–∏—è] delete`'
            },
            "private": {
                "usage": f'`{pr}edit-guild privacy [–ì–∏–ª—å–¥–∏—è] on / off`',
                "example": f'`{pr}edit-guild privacy [–ú–æ—è –≥–∏–ª—å–¥–∏—è] on`'
            },
            "limit": {
                "usage": f"`{pr}edit-guild limit [–ì–∏–ª—å–¥–∏—è] –ß–∏—Å–ª–æ`",
                "example": f"`{pr}edit-guild limit –ö–æ—Ä–æ–ª–∏ 15`"
            }
        }

        parameters = {
            "name": ["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
            "description": ["–æ–ø–∏—Å–∞–Ω–∏–µ"],
            "avatar_url": ["–∞–≤–∞—Ç–∞—Ä–∫–∞"],
            "leader_id": ["–≥–ª–∞–≤–∞", "owner"],
            "helper_id": ["–ø–æ–º–æ—â–Ω–∏–∫", "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"],
            "role_id": ["—Ä–æ–ª—å"],
            "private": ["–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", "privacy"],
            "limit": ["–ª–∏–º–∏—Ç", "–º–∞–∫—Å–∏–º—É–º", "max"]
        }
        parameter = find_alias(parameters, param)

        if parameter is None:
            reply = discord.Embed(
                title = f"‚ùì | –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `{param}`",
                description = (
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –æ–¥–Ω–∏–º –∏–∑ —ç—Ç–∏—Ö:\n"
                    f"> `{pr}edit-guild name`\n"
                    f"> `{pr}edit-guild description`\n"
                    f"> `{pr}edit-guild avatar`\n"
                    f"> `{pr}edit-guild leader`\n"
                    f"> `{pr}edit-guild helper`\n"
                    f"> `{pr}edit-guild role`\n"
                    f"> `{pr}edit-guild privacy`\n"
                    f"> `{pr}edit-guild limit`\n"
                    f"**–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** `{pr}edit-guild`\n"
                    f'**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `{pr}edit-guild –ü–∞—Ä–∞–º–µ—Ç—Ä [–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏] –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`\n'
                    f'**–ü—Ä–∏–º–µ—Ä:** `{pr}edit-guild name [–ú–æ—è –≥–∏–ª—å–¥–∏—è] –•—Ä–∞–Ω–∏—Ç–µ–ª–∏`\n'
                )
            )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)
        else:
            if text_data is None:
                reply = discord.Embed()
                reply.title = f"üõ† | –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ {pr}edit-guild {param}"
                reply.description = (
                        f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {param_desc[parameter]['usage']}\n"
                        f"**–ü—Ä–∏–º–µ—Ä:** {param_desc[parameter]['example']}")
                reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                await ctx.send(embed = reply)
            
            else:
                search, text = sep_args(text_data)
                sconf = Server(ctx.guild.id, {
                    "subguilds.name": True, "subguilds.leader_id": True,
                    "master_roles": True, "log_channel": True
                })
                guild_name = await ask_to_choose(sconf.names_matching(search), ctx.channel, ctx.author, self.client, pr)
                if guild_name is None:
                    raise IsNotSubguild(search)
                
                elif isinstance(guild_name, EmergencyExit):
                    guild_name = None
                    return

                else:
                    g = sconf.get_guild_named(guild_name)

                    if (ctx.author.id != g.leader_id and not any([r.id in sconf.master_roles for r in ctx.author.roles])
                    and not ctx.author.guild_permissions.administrator):
                        raise commands.MissingPermissions(["administrator", "guild_master", "guild_leader"])
                    
                    else:
                        correct_arg = True
                        if parameter == "name":
                            value = text.replace("$", "")
                            if value == "":
                                correct_arg = False
                                desc = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –≥–∏–ª—å–¥–∏—é –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"
                            elif sconf.get_guild_named(value) is not None:
                                correct_arg = False
                                desc = f"–ì–∏–ª—å–¥–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {anf(value)} —É–∂–µ –µ—Å—Ç—å"
                            else:
                                g.edit_name(value)
                                desc = f"–ì–∏–ª—å–¥–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ **{anf(value)}**"
                        
                        elif parameter == "description":
                            value = text.replace("$", "")[:256]
                            g.edit_description(value)
                            desc = f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {value}"
    
                        elif parameter in ["leader_id", "helper_id"]:
                            if text.lower() == "delete" and parameter == "helper_id":
                                g.edit_helper_id(None)
                                desc = "–í –≥–∏–ª—å–¥–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞."
                            else:
                                value = await commands.MemberConverter().convert(ctx, text)
                                # Error will be raised in case member wasn't found
                                if value.id == g.leader_id:
                                    correct_arg = False
                                    desc = f"**{anf(value)}** —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–æ–π —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏."
                                else:
                                    if parameter == "leader_id":
                                        g.edit_leader_id(value.id)
                                        desc = f"–í–ª–∞–¥–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–µ–π –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ä—É–∫–∏ **{anf(value)}**."
                                    else:
                                        g.edit_helper_id(value.id)
                                        desc = f"–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫: **{anf(value)}**."
                            
                        elif parameter == "role_id":
                            if text.lower() == "delete":
                                g.edit_role_id(None)
                                desc = "–†–æ–ª—å –≥–∏–ª—å–¥–∏–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
                            else:
                                value = await commands.RoleConverter().convert(ctx, text)
                                if not ctx.author.guild_permissions.manage_roles or value.position >= ctx.author.top_role.position:
                                    correct_arg = False
                                    desc = f"–†–æ–ª—å <@&{value.id}> –Ω–µ –Ω–∏–∂–µ –í–∞—à–µ–π –∏–ª–∏ —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏."
                                elif not ctx.guild.me.guild_permissions.manage_roles or value.position >= ctx.guild.me.top_role.position:
                                    correct_arg = False
                                    desc = f"–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤. –†–æ–ª—å <@&{value.id}> –Ω–µ –Ω–∏–∂–µ –º–æ–µ–π –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏."
                                else:
                                    g.edit_role_id(value.id)
                                    desc = (f"–¢–µ–ø–µ—Ä—å **<@&{value.id}>** - —ç—Ç–æ —Ä–æ–ª—å –≥–∏–ª—å–¥–∏–∏. "
                                    f"–ù–æ–≤–æ–±—Ä–∞–Ω—Ü—ã –ø–æ–ª—É—á–∞—Ç –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∞ —Ç–µ–∫—É—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å `{pr}get-guild-role`")

                        elif parameter == "avatar_url":
                            atts = ctx.message.attachments
                            if atts != []:
                                value = atts[0].url
                            else:
                                value = text
                                correct_arg = text.startswith("https://")
                            if not correct_arg:
                                desc = f"–ù–µ —É–¥–∞—ë—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —Å—Å—ã–ª–∫–µ {text}"
                            else:
                                g.edit_avatar_url(value)
                                desc = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä."

                        elif parameter == "private":
                            on = ["on", "–≤–∫–ª", "1"]
                            off = ["off", "–≤—ã–∫–ª", "0"]
                            if text.lower() in on:
                                g.edit_privacy(True)
                                desc = f"–í–∫–ª—é—á–µ–Ω –≤—Ö–æ–¥ –ø–æ –∑–∞—è–≤–∫–∞–º."
                            elif text.lower() in off:
                                g.edit_privacy(False)
                                desc = f"–í—ã–∫–ª—é—á–µ–Ω –≤—Ö–æ–¥ –ø–æ –∑–∞—è–≤–∫–∞–º."
                            else:
                                correct_arg = False
                                desc = f"–í—Ö–æ–¥–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç {text} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `on` –∏–ª–∏ `off`"
                        
                        elif parameter == "limit":
                            value = await IntConverter().convert(ctx, text)
                            # Error will be raised in case it's not int
                            if value > sconf.member_limit:
                                correct_arg = False
                                desc = f"–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≥–∏–ª—å–¥–∏–∏ —Å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –±–æ–ª—å—à–µ, —á–µ–º **{sconf.member_limit}**."
                            else:
                                g.edit_limit(value)
                                desc = f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –≤ –≥–∏–ª—å–¥–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∑–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º **{value}**, —Ç–æ –≤ –Ω–µ—ë –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–π—Ç–∏."
                        
                        if correct_arg:
                            reply = discord.Embed(color=mmorpg_col("clover"))
                            reply.title = f"‚úÖ | {anf(g.name)}: –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                            reply.description = f"{desc}\n\n**–ü—Ä–æ—Ñ–∏–ª—å –≥–∏–ª—å–¥–∏–∏:** `{pr}guild-info {g.name}`"
                            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                            await ctx.send(embed=reply)
                            # Logging
                            log = discord.Embed(color=discord.Color.blurple())
                            log.title = "üìù | –ì–∏–ª—å–¥–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞"
                            log.description = (
                                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {g.name}\n"
                                f"**–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {desc}\n"
                                f"**–ò–∑–º–µ–Ω–∏–ª:** {anf(ctx.author)}"
                            )
                            await post_log(ctx.guild, sconf.log_channel, log)
                        else:
                            reply = discord.Embed(color=discord.Color.dark_red())
                            reply.title = "‚ùå | –û—à–∏–±–∫–∞"
                            reply.description = desc
                            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                            await ctx.send(embed=reply)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["delete-guild", "deleteguild", "dg", "delete"],
        description="—É–¥–∞–ª—è–µ—Ç –≥–∏–ª—å–¥–∏—é",
        usage="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏",
        brief="–ö–æ—Ä–æ–ª–∏" )
    async def delete_guild(self, ctx, *, guild_search):
        pr = ctx.prefix
        sconf = Server(ctx.guild.id, {
            "log_channel": True, "master_roles": True,
            "subguilds.name": True, "subguilds.leader_id": True})
        
        guild_name = await ask_to_choose(sconf.names_matching(guild_search), ctx.channel, ctx.author, self.client, pr)

        if guild_name is None:
            raise IsNotSubguild(guild_search)
        elif isinstance(guild_name, EmergencyExit):
            pass
        else:
            g = sconf.get_guild_named(guild_name)
            del guild_name, guild_search
            if (not ctx.author.guild_permissions.administrator and ctx.author.id != g.leader_id and
            not any([r.id in sconf.master_roles for r in ctx.author.roles]) ):
                raise commands.MissingPermissions(["administrator", "guild_leader", "guild_master"])
            else:
                sconf.delete_guild(g.name)
                
                reply = discord.Embed(
                    title = "üóë | –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    description = f"–í—ã —É–¥–∞–ª–∏–ª–∏ –≥–∏–ª—å–¥–∏—é **{g.name}**"
                )
                reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                await ctx.send(embed = reply)

                log = discord.Embed(
                    title="üí• | –£–¥–∞–ª–µ–Ω–∞ –≥–∏–ª—å–¥–∏—è",
                    description=(
                        f"**–£–¥–∞–ª–∏–ª:** {anf(ctx.author)}\n"
                        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {anf(g.name)}\n"
                    ),
                    color=mmorpg_col("vinous")
                )
                await post_log(ctx.guild, sconf.log_channel, log)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["req", "request"],
        description="–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–∫—É—é-–ª–∏–±–æ –≥–∏–ª—å–¥–∏—é.",
        usage='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ì–∏–ª—å–¥–∏—è',
        brief="1 –ö–æ—Ä–æ–ª–∏" )
    async def requests(self, ctx, page: IntConverter, *, search):
        pr = ctx.prefix
        interval = 20

        sconf = Server(ctx.guild.id, {
            "master_roles": True, "subguilds.helper_id": True, "subguilds.requests": True,
            "subguilds.name": True, "subguilds.leader_id": True, "subguilds.private": True})
        
        guild_name = await ask_to_choose(sconf.names_matching(search), ctx.channel, ctx.author, self.client, pr)
        
        if guild_name is None:
            raise IsNotSubguild(search)
        elif isinstance(guild_name, EmergencyExit):
            pass
        else:
            g = sconf.get_guild_named(guild_name)
            sconf.__guilds = []
            del guild_name, search
            
            # Check rights
            if (ctx.author.id not in [g.leader_id, g.helper_id] and
            not ctx.author.guild_permissions.administrator and not any([r.id in sconf.master_roles for r in ctx.author.roles])):
                raise commands.MissingPermissions(["administrator", "guild_master", "guild_leader", "guild_helper"])
            # Check privacy
            elif not g.private:
                reply = discord.Embed(
                    title = f"üõ† | –ì–∏–ª—å–¥–∏—è {g.name} –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞",
                    description = f"–≠—Ç–æ –≥–∏–ª—å–¥–∏—è —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º."
                )
                reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                await ctx.send(embed = reply)

            else:
                bad_ids = []
                req_list = []
                for ID in g.requests:
                    member = ctx.guild.get_member(ID)
                    if member is None:
                        bad_ids.append(ID)
                    else:
                        req_list.append(member)

                length = len(req_list)

                first_num = (page - 1) * interval
                total_pages = (length - 1) // interval + 1
                if first_num >= length:
                    if length == 0:
                        title = f"üìú | –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ {g.name} –ø—É—Å—Ç"
                        desc = "–ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ"
                    else:
                        title = "üîé | –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        desc = f"**–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:** {total_pages}"
                    reply = discord.Embed(
                        title = title,
                        description = desc,
                        color = mmorpg_col("paper")
                    )
                    reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                    await ctx.send(embed = reply)
                
                else:
                    desc = ""
                    last_num = min(first_num + interval, length)
                    for i in range(first_num, last_num):
                        desc += f"**{i + 1})** {anf(req_list[i])}\n"

                    reply = discord.Embed(
                        title = "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
                        description = (
                            f"**–í –≥–∏–ª—å–¥–∏—é:** {anf(g.name)}\n"
                            f"**–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å:** `{pr}accept –ù–æ–º–µ—Ä_–∑–∞–ø—Ä–æ—Å–∞ {g.name}`\n"
                            f"**–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:** `{pr}decline –ù–æ–º–µ—Ä_–∑–∞–ø—Ä–æ—Å–∞ {g.name}`\n\n"
                            f"{desc}"
                        ),
                        color = mmorpg_col("lilac")
                    )
                    reply.set_footer(text = f"–°—Ç—Ä. {page}/{total_pages}")
                    await ctx.send(embed = reply)
                
                #======Remove invalid members======
                if bad_ids != []:
                    g.decline_requests(bad_ids)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["ac", "acc"],
        description="–ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫: `requests`",
        usage='–ù–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏ –ì–∏–ª—å–¥–∏—è\nall –ì–∏–ª—å–¥–∏—è  (–ø—Ä–∏–Ω—è—Ç—å –≤—Å—ë)',
        brief="1 –ö–æ—Ä–æ–ª–∏\nall –ö–æ—Ä–æ–ª–∏" )
    async def accept(self, ctx, num, *, search):
        if num.lower() != "all": num = await IntConverter().convert(ctx, num)
        pr = ctx.prefix

        sconf = Server(ctx.guild.id, {
            "log_channel": True, "master_roles": True, "subguilds.helper_id": True, "subguilds.requests": True,
            "subguilds.name": True, "subguilds.leader_id": True, "subguilds.private": True})
        guild_name = await ask_to_choose(sconf.names_matching(search), ctx.channel, ctx.author, self.client, pr)
        
        if guild_name is None:
            raise IsNotSubguild(search)
        elif isinstance(guild_name, EmergencyExit):
            pass

        else:
            g = sconf.get_guild_named(guild_name)
            g.__guilds = []
            del guild_name, search
            # Check rights
            if (ctx.author.id not in [g.leader_id, g.helper_id] and
            not ctx.author.guild_permissions.administrator and not any([r.id in sconf.master_roles for r in ctx.author.roles])):
                raise commands.MissingPermissions(["administrator", "guild_master", "guild_leader", "guild_helper"])
            # Check privacy
            elif not g.private:
                reply = discord.Embed()
                reply.title = f"‚ùå | –ì–∏–ª—å–¥–∏—è {g.name} –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞"
                reply.description = f"–≠—Ç–æ –≥–∏–ª—å–¥–∏—è —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º."
                reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
            # Check range
            elif num != "all" and not (0 < num <= g.request_count):
                reply = discord.Embed(color=discord.Color.dark_red())
                reply.title = "‚ùå | –û—à–∏–±–∫–∞"
                reply.description = f"**{num}** –ø—Ä–µ–≤—ã—à–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
                reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)

            else:
                if num == "all":
                    g.accept_requests()
                    desc = f"–ü—Ä–∏–Ω—è—Ç–æ –∑–∞—è–≤–æ–∫: **{g.request_count}**"
                else:
                    member = ctx.guild.get_member(g.requests[num - 1])
                    g.accept_requests(member.id)
                    desc = f"–ó–∞—è–≤–∫–∞ **{anf(member)}** –ø—Ä–∏–Ω—è—Ç–∞"

                    await give_join_role(member, g.role_id)
                
                reply = discord.Embed()
                reply.title = "üõ† | –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                reply.description = desc
                reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
                # Log
                log = discord.Embed(color=discord.Color.blurple())
                log.title = "üì• | –ü—Ä–∏–Ω—è—Ç—ã –∑–∞—è–≤–∫–∏"
                log.description = (
                    f"**–ì–∏–ª—å–¥–∏—è:** {anf(g.name)}\n"
                    f"**–ü—Ä–∏–Ω—è–ª:** {anf(ctx.author)}\n"
                    f"**–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:** {desc}"
                )
                await post_log(ctx.guild, sconf.log_channel, log)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        aliases=["dec"],
        description="–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫: `requests`",
        usage='–ù–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏ –ì–∏–ª—å–¥–∏—è\nall –ì–∏–ª—å–¥–∏—è  (–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å—ë)',
        brief="1 –ö–æ—Ä–æ–ª–∏\nall –ö–æ—Ä–æ–ª–∏" )
    async def decline(self, ctx, num, *, search):
        if num.lower() != "all": num = await IntConverter().convert(ctx, num)
        pr = ctx.prefix

        sconf = Server(ctx.guild.id, {
            "log_channel": True, "master_roles": True, "subguilds.helper_id": True, "subguilds.requests": True,
            "subguilds.name": True, "subguilds.leader_id": True, "subguilds.private": True})
        guild_name = await ask_to_choose(sconf.names_matching(search), ctx.channel, ctx.author, self.client, pr)
        
        if guild_name is None:
            raise IsNotSubguild(search)
        elif isinstance(guild_name, EmergencyExit):
            pass

        else:
            g = sconf.get_guild_named(guild_name)
            g.__guilds = []
            del guild_name, search
            # Check rights
            if (ctx.author.id not in [g.leader_id, g.helper_id] and
            not ctx.author.guild_permissions.administrator and not any([r.id in sconf.master_roles for r in ctx.author.roles])):
                raise commands.MissingPermissions(["administrator", "guild_master", "guild_leader", "guild_helper"])
            # Check privacy
            elif not g.private:
                reply = discord.Embed()
                reply.title = f"‚ùå | –ì–∏–ª—å–¥–∏—è {g.name} –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞"
                reply.description = f"–≠—Ç–æ –≥–∏–ª—å–¥–∏—è —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º."
                reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
            # Check range
            elif num != "all" and not (0 < num <= g.request_count):
                reply = discord.Embed(color=discord.Color.dark_red())
                reply.title = "‚ùå | –û—à–∏–±–∫–∞"
                reply.description = f"**{num}** –ø—Ä–µ–≤—ã—à–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
                reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)

            else:
                if num == "all":
                    g.decline_requests()
                    desc = f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫: **{g.request_count}**"
                else:
                    member = ctx.guild.get_member(g.requests[num - 1])
                    g.decline_requests([member.id])
                    desc = f"–ó–∞—è–≤–∫–∞ **{anf(member)}** –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                
                reply = discord.Embed()
                reply.title = f"üõ† | {anf(g.name)}"
                reply.description = desc
                reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
                # Log
                log = discord.Embed(color=discord.Color.blurple())
                log.title = "üì§ | –û—Ç–∫–ª–æ–Ω–µ–Ω—ã –∑–∞—è–≤–∫–∏"
                log.description = (
                    f"**–ì–∏–ª—å–¥–∏—è:** {anf(g.name)}\n"
                    f"**–û—Ç–∫–ª–æ–Ω–∏–ª:** {anf(ctx.author)}\n"
                    f"**–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:** {desc}"
                )
                await post_log(ctx.guild, sconf.log_channel, log)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.command(
        description="–∏—Å–∫–ª—é—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞(–æ–≤) –∏–∑ –≥–∏–ª—å–¥–∏–∏",
        usage="user –£—á–∞—Å—Ç–Ω–∏–∫\nunder –ß–∏—Å–ª–æ\nlast –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        brief="user @User#1234\nunder 150\nlast 10" )
    async def kick(self, ctx, param, value=None, *, search=None):
        pr = ctx.prefix
        param_aliases = {
            "user": ["—É—á–∞—Å—Ç–Ω–∏–∫", "member", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            "under": ["lower", "–Ω–∏–∂–µ"],
            "last": ["–ø–æ—Å–ª–µ–¥–Ω–∏–µ"]
        }

        params = {
            "user": {
                "usage": f"`{pr}kick user @–£—á–∞—Å—Ç–Ω–∏–∫ –ì–∏–ª—å–¥–∏—è`",
                "example": f"`{pr}kick user @–£—á–∞—Å—Ç–Ω–∏–∫ –ú–æ—è –ì–∏–ª—å–¥–∏—è`",
                "info": "–ö–∏–∫–Ω—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
            },
            "under": {
                "usage": f"`{pr}kick under –ü–ª–∞–Ω–∫–∞_–æ–ø—ã—Ç–∞ –ì–∏–ª—å–¥–∏—è`",
                "example": f"`{pr}kick under 500 –ú–æ—è –ì–∏–ª—å–¥–∏—è`",
                "info": "–ö–∏–∫–Ω—É—Ç—å —Ç–µ—Ö, —É –∫–æ–≥–æ –∫–æ–ª-–≤–æ –æ–ø—ã—Ç–∞ –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–ª–∞–Ω–∫–∏"
            },
            "last": {
                "usage": f"`{pr}kick last –ö–æ–ª-–≤–æ –ì–∏–ª—å–¥–∏—è`",
                "example": f"`{pr}kick last 10 –ú–æ—è –≥–∏–ª—å–¥–∏—è`",
                "info": "–ö–∏–∫–Ω—É—Ç—å —Å–∫–æ–ª—å–∫–æ-—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            }
        }
        parameter = find_alias(param_aliases, param)
        if parameter is None:
            desc = ""
            for _param in params:
                desc += f"> `{_param}`\n"
            reply = discord.Embed(color=mmorpg_col("vinous"))
            reply.title = "‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"
            reply.description = f"–í—ã –≤–≤–µ–ª–∏: `{param}`\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{desc}"
            reply.set_footer(text=f"{ctx.author}", icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        elif value is None or search is None:
            reply = discord.Embed()
            reply.title = f"üõ† | {pr}kick {parameter}"
            reply.description = (
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {params[parameter]['info']}\n"
                    f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {params[parameter]['usage']}\n"
                    f"**–ü—Ä–∏–º–µ—Ä:** {params[parameter]['example']}"
                )
            reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
            await ctx.send(embed = reply)
        
        else:
            sconf = Server(ctx.guild.id, {"log_channel": True, "master_roles": True, "subguilds.name": True})
            guild_name = await ask_to_choose(sconf.names_matching(search), ctx.channel, ctx.author, self.client, pr)
            
            if guild_name is None:
                raise IsNotSubguild(search)
            elif isinstance(guild_name, EmergencyExit):
                pass

            else:
                sconf.__guilds = []
                g = Guild(ctx.guild.id, name=guild_name, attrs_projection={"name": True, "members": True, "leader_id": True, "helper_id": True})

                logdesc = None
                # Check rights
                if (ctx.author.id not in [g.leader_id, g.helper_id] and
                not ctx.author.guild_permissions.administrator and not any([r.id in sconf.master_roles for r in ctx.author.roles])):
                    raise commands.MissingPermissions(["administrator", "guild_master", "guild_leader", "guild_helper"])
                
                elif parameter == "user":
                    user = await commands.MemberConverter().convert(ctx, value)
                    desc = None
                    if user.id == g.leader_id:
                        desc = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å –≥–ª–∞–≤—É –≥–∏–ª—å–¥–∏–∏"
                    elif user.id == ctx.author.id:
                        desc = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è"
                    elif user.id not in [m.id for m in g.members]:
                        desc = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{anf(user)}** –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥–∏–ª—å–¥–∏–∏ **{g.name}**"
                    
                    if desc is not None:
                        reply = discord.Embed(color=mmorpg_col("vinous"))
                        reply.title = "‚ùå | –û—à–∏–±–∫–∞"
                        reply.description = desc
                        reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                        await ctx.send(embed=reply)

                    else:
                        g.kick(user.id)
                        logdesc = f"{anf(user)} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥–∏–ª—å–¥–∏–∏."
                        reply = discord.Embed(color=mmorpg_col("clover"))
                        reply.title = f"‚úÖ | {g.name}"
                        reply.description = logdesc
                        reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                        await ctx.send(embed=reply)
                
                elif parameter == "under":
                    value = await IntConverter().convert(ctx, value)
                    to_kick = [m.id for m in g.members if m.xp <= value and m.id != g.leader_id]
                    g.__members = []
                    g.kick(*to_kick)

                    logdesc = f"–ò—Å–∫–ª—é—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏: **{len(to_kick)}**, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ **{value}** –æ–ø—ã—Ç–∞."
                    reply = discord.Embed(color=mmorpg_col("clover"))
                    reply.title = f"‚úÖ | {g.name}"
                    reply.description = logdesc
                    reply.set_footer(text = f"{ctx.author}", icon_url=ctx.author.avatar_url)
                    await ctx.send(embed=reply)

                    if g.role_id is not None:
                        for ID in to_kick:
                            self.client.loop.create_task(remove_join_role(ctx.guild.get_member(ID), g.role_id))

                elif parameter == "last":
                    value = await IntConverter().convert(ctx, value)
                    to_kick = []
                    for m in sorted(g.members, key=lambda m: m.xp):
                        if m.id != g.leader_id:
                            to_kick.append(m.id)
                    g.__memebrs = []
                    g.kick(*to_kick)
                    
                    logdesc = f"–ò—Å–∫–ª—é—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏: **{len(to_kick)}** —Å –∫–æ–Ω—Ü–∞."
                    reply = discord.Embed(color=mmorpg_col("clover"))
                    reply.title = f"‚úÖ | {g.name}"
                    reply.description = logdesc
                    reply.set_footer(text = f"{ctx.author}", icon_url = f"{ctx.author.avatar_url}")
                    await ctx.send(embed = reply)

                    if g.role_id is not None:
                        for ID in to_kick:
                            self.client.loop.create_task(remove_join_role(ctx.guild.get_member(ID), g.role_id))
                
                if logdesc is not None:
                    # Log
                    log = discord.Embed(color=discord.Color.blurple())
                    log.title = "üõ† | –ò—Å–∫–ª—é—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏"
                    log.description = (
                        f"**–ì–∏–ª—å–¥–∏—è:** {anf(g.name)}\n"
                        f"**–ò—Å–∫–ª—é—á–∏–ª:** {anf(ctx.author)}\n"
                        f"**–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:** {logdesc}"
                    )
                    await post_log(ctx.guild, sconf.log_channel, log)


    @commands.cooldown(1, 5, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["add-xp", "change-xp"],
        description="–∏–∑–º–µ–Ω—è–µ—Ç –æ–ø—ã—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
        usage="–û–ø—ã—Ç –£—á–∞—Å—Ç–Ω–∏–∫",
        brief="123 @User#1234" )
    async def xp(self, ctx, _xp: IntConverter, *, member: discord.Member):
        sconf = Server(ctx.guild.id, {"log_channel": True, "subguilds.name": True, f"subguilds.members.{member.id}": True},
        {f"subguilds.members.{member.id}": {"$exists": True}})
        g = sconf.get_guild(member.id)
        
        if g is None:
            reply = discord.Embed(color=mmorpg_col("vinous"))
            reply.title = "üí¢ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏"
            reply.description = f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{anf(member)}** –º–æ–≥ –ø–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–∏–ª—å–¥–∏–∏."
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

        else:
            sconf.add_xp(member.id, _xp)
            # Response
            reply = discord.Embed(color=mmorpg_col("clover"))
            reply.title = "‚ôª –û–ø—ã—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω—ë–Ω"
            reply.description = f"–û–ø—ã—Ç **{anf(member)}**, —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥–∏–ª—å–¥–∏–∏ **{g.name}**, –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ **{add_sign(_xp)}** ‚ú®"
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
            # Logging
            log = discord.Embed(color=discord.Color.orange())
            log.title="‚ú® | –ò–∑–º–µ–Ω—ë–Ω –æ–ø—ã—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"
            log.description=(
                f"**–ì–∏–ª—å–¥–∏—è:** {anf(g.name)}\n"
                f"**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {anf(ctx.author)}\n"
                f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {anf(member)}\n"
                f"**–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {add_sign(_xp)}"
            )
            await post_log(ctx.guild, sconf.log_channel, log)


def setup(client):
    client.add_cog(guild_control(client))